{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { resolveScheme } from 'expo-linking/build/Schemes';\nimport { Platform } from 'expo-modules-core';\nimport qs from 'qs';\nexport var SessionUrlProvider = function () {\n  function SessionUrlProvider() {\n    _classCallCheck(this, SessionUrlProvider);\n  }\n\n  _createClass(SessionUrlProvider, [{\n    key: \"getDefaultReturnUrl\",\n    value: function getDefaultReturnUrl(urlPath, options) {\n      var _options$scheme;\n\n      var queryParams = SessionUrlProvider.getHostAddressQueryParams();\n      var path = SessionUrlProvider.SESSION_PATH;\n\n      if (urlPath) {\n        path = [path, SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');\n      }\n\n      return Linking.createURL(path, {\n        scheme: (_options$scheme = options == null ? void 0 : options.scheme) != null ? _options$scheme : resolveScheme({\n          isSilent: true\n        }),\n        queryParams: queryParams,\n        isTripleSlashed: options == null ? void 0 : options.isTripleSlashed\n      });\n    }\n  }, {\n    key: \"getStartUrl\",\n    value: function getStartUrl(authUrl, returnUrl) {\n      if (Platform.OS === 'web' && !Platform.isDOMAvailable) {\n        return '';\n      }\n\n      var queryString = qs.stringify({\n        authUrl: authUrl,\n        returnUrl: returnUrl\n      });\n      return this.getRedirectUrl() + \"/start?\" + queryString;\n    }\n  }, {\n    key: \"getRedirectUrl\",\n    value: function getRedirectUrl(urlPath) {\n      var _Constants$manifest, _Constants$manifest2, _Constants$manifest2$, _Constants$manifest2$2, _Constants$manifest3;\n\n      if (Platform.OS === 'web') {\n        if (Platform.isDOMAvailable) {\n          return [window.location.origin, urlPath].filter(Boolean).join('/');\n        } else {\n          return '';\n        }\n      }\n\n      var legacyExpoProjectId = ((_Constants$manifest = Constants.manifest) == null ? void 0 : _Constants$manifest.originalFullName) || ((_Constants$manifest2 = Constants.manifest2) == null ? void 0 : (_Constants$manifest2$ = _Constants$manifest2.extra) == null ? void 0 : (_Constants$manifest2$2 = _Constants$manifest2$.expoClient) == null ? void 0 : _Constants$manifest2$2.originalFullName) || ((_Constants$manifest3 = Constants.manifest) == null ? void 0 : _Constants$manifest3.id);\n\n      if (!legacyExpoProjectId) {\n        var nextSteps = '';\n\n        if (__DEV__) {\n          if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n            nextSteps = ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that originalFullName is defined by running `expo config --type public` and inspecting the output.';\n          } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n            nextSteps = ' Please report this as a bug with the contents of `expo config --type public`.';\n          }\n        }\n\n        throw new Error('Cannot use AuthSession proxy because the project ID is not defined.' + nextSteps);\n      }\n\n      var redirectUrl = SessionUrlProvider.BASE_URL + \"/\" + legacyExpoProjectId;\n\n      if (__DEV__) {\n        SessionUrlProvider.warnIfAnonymous(legacyExpoProjectId, redirectUrl);\n      }\n\n      return redirectUrl;\n    }\n  }], [{\n    key: \"getHostAddressQueryParams\",\n    value: function getHostAddressQueryParams() {\n      var _Constants$manifest$h, _Constants$manifest4, _Constants$manifest5, _Constants$manifest5$, _Constants$manifest5$2, _hostUri;\n\n      var hostUri = (_Constants$manifest$h = (_Constants$manifest4 = Constants.manifest) == null ? void 0 : _Constants$manifest4.hostUri) != null ? _Constants$manifest$h : (_Constants$manifest5 = Constants.manifest2) == null ? void 0 : (_Constants$manifest5$ = _Constants$manifest5.extra) == null ? void 0 : (_Constants$manifest5$2 = _Constants$manifest5$.expoClient) == null ? void 0 : _Constants$manifest5$2.hostUri;\n\n      if (!hostUri && (ExecutionEnvironment.StoreClient === Constants.executionEnvironment || resolveScheme({}))) {\n        if (!Constants.linkingUri) {\n          hostUri = '';\n        } else {\n          hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n        }\n      }\n\n      if (!hostUri) {\n        return undefined;\n      }\n\n      var uriParts = (_hostUri = hostUri) == null ? void 0 : _hostUri.split('?');\n\n      try {\n        return qs.parse(uriParts == null ? void 0 : uriParts[1]);\n      } catch (_unused) {}\n\n      return undefined;\n    }\n  }, {\n    key: \"warnIfAnonymous\",\n    value: function warnIfAnonymous(id, url) {\n      if (id.startsWith('@anonymous/')) {\n        console.warn(\"You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \\\"\" + url + \"\\\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.\");\n      }\n    }\n  }, {\n    key: \"removeScheme\",\n    value: function removeScheme(url) {\n      return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n    }\n  }, {\n    key: \"removeLeadingSlash\",\n    value: function removeLeadingSlash(url) {\n      return url.replace(/^\\//, '');\n    }\n  }]);\n\n  return SessionUrlProvider;\n}();\nSessionUrlProvider.BASE_URL = \"https://auth.expo.io\";\nSessionUrlProvider.SESSION_PATH = 'expo-auth-session';\nexport default new SessionUrlProvider();","map":{"version":3,"sources":["../src/SessionUrlProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { CreateURLOptions } from 'expo-linking';\nimport { resolveScheme } from 'expo-linking/build/Schemes';\nimport { Platform } from 'expo-modules-core';\nimport qs, { ParsedQs } from 'qs';\n\nexport class SessionUrlProvider {\n  private static readonly BASE_URL = `https://auth.expo.io`;\n  private static readonly SESSION_PATH = 'expo-auth-session';\n\n  getDefaultReturnUrl(urlPath?: string, options?: Omit<CreateURLOptions, 'queryParams'>): string {\n    const queryParams = SessionUrlProvider.getHostAddressQueryParams();\n    let path = SessionUrlProvider.SESSION_PATH;\n    if (urlPath) {\n      path = [path, SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');\n    }\n\n    return Linking.createURL(path, {\n      // The redirect URL doesn't matter for the proxy as long as it's valid, so silence warnings if needed.\n      scheme: options?.scheme ?? resolveScheme({ isSilent: true }),\n      queryParams,\n      isTripleSlashed: options?.isTripleSlashed,\n    });\n  }\n\n  getStartUrl(authUrl: string, returnUrl: string): string {\n    if (Platform.OS === 'web' && !Platform.isDOMAvailable) {\n      // Return nothing in SSR envs\n      return '';\n    }\n    const queryString = qs.stringify({\n      authUrl,\n      returnUrl,\n    });\n\n    return `${this.getRedirectUrl()}/start?${queryString}`;\n  }\n\n  getRedirectUrl(urlPath?: string): string {\n    if (Platform.OS === 'web') {\n      if (Platform.isDOMAvailable) {\n        return [window.location.origin, urlPath].filter(Boolean).join('/');\n      } else {\n        // Return nothing in SSR envs\n        return '';\n      }\n    }\n\n    const legacyExpoProjectId =\n      Constants.manifest?.originalFullName ||\n      Constants.manifest2?.extra?.expoClient?.originalFullName ||\n      Constants.manifest?.id;\n\n    if (!legacyExpoProjectId) {\n      let nextSteps = '';\n      if (__DEV__) {\n        if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n          nextSteps =\n            ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that originalFullName is defined by running `expo config --type public` and inspecting the output.';\n        } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n          nextSteps =\n            ' Please report this as a bug with the contents of `expo config --type public`.';\n        }\n      }\n      throw new Error(\n        'Cannot use AuthSession proxy because the project ID is not defined.' + nextSteps\n      );\n    }\n\n    const redirectUrl = `${SessionUrlProvider.BASE_URL}/${legacyExpoProjectId}`;\n    if (__DEV__) {\n      SessionUrlProvider.warnIfAnonymous(legacyExpoProjectId, redirectUrl);\n      // TODO: Verify with the dev server that the manifest is up to date.\n    }\n    return redirectUrl;\n  }\n\n  private static getHostAddressQueryParams(): ParsedQs | undefined {\n    let hostUri: string | undefined =\n      Constants.manifest?.hostUri ?? Constants.manifest2?.extra?.expoClient?.hostUri;\n    if (\n      !hostUri &&\n      (ExecutionEnvironment.StoreClient === Constants.executionEnvironment || resolveScheme({}))\n    ) {\n      if (!Constants.linkingUri) {\n        hostUri = '';\n      } else {\n        // we're probably not using up-to-date xdl, so just fake it for now\n        // we have to remove the /--/ on the end since this will be inserted again later\n        hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n      }\n    }\n\n    if (!hostUri) {\n      return undefined;\n    }\n\n    const uriParts = hostUri?.split('?');\n    try {\n      return qs.parse(uriParts?.[1]);\n    } catch {}\n\n    return undefined;\n  }\n\n  private static warnIfAnonymous(id, url): void {\n    if (id.startsWith('@anonymous/')) {\n      console.warn(\n        `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n      );\n    }\n  }\n\n  private static removeScheme(url: string) {\n    return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n  }\n\n  private static removeLeadingSlash(url: string) {\n    return url.replace(/^\\//, '');\n  }\n}\n\nexport default new SessionUrlProvider();\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}